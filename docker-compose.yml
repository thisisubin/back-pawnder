name: Deploy Dockerized Spring Boot to EC2 (No Docker Hub)

on:
  push:
    branches:
      - main

env:
  MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
  MYSQL_USER: ${{ secrets.MYSQL_USER }}
  MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Upload source code to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ubuntu
          key: ${{ env.EC2_SSH_KEY }}
          source: "."                  # 프로젝트 전체 또는 Dockerfile + 소스만
          target: "~/app"

      - name: SSH into EC2 and build & run Docker container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.EC2_HOST }}
          username: ubuntu
          key: ${{ env.EC2_SSH_KEY }}
          script: |
            cd ~/app
      
            # Build Spring Boot app Docker image
            docker build -t myapp:latest .
      
            # Stop and remove 기존 컨테이너 (오류 무시)
            docker stop myapp || true
            docker rm myapp || true
            docker stop redis-container || true
            docker rm redis-container || true
            docker stop elasticsearch-container || true
            docker rm elasticsearch-container || true
            
            # Redis 컨테이너 실행 (필요시 볼륨 추가)
            docker run -d --name redis-container -p 6379:6379 redis:7.0
      
      
            # Elasticsearch 컨테이너 실행 (필요한 설정 추가 가능)
            docker run -d --name elasticsearch-container -p 9200:9200 -p 9300:9300 \
            -e "discovery.type=single-node" \
            docker.elastic.co/elasticsearch/elasticsearch:8.9.0
            docker run -d --name myapp -p 8080:8080 myapp:latest --spring.profiles.active=prod

